{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>For full MkDocs documentation visit mkdocs.org. For full theme documentation visi material.</p>"},{"location":"#setup","title":"Setup","text":""},{"location":"#1-download-godot-game-engine-version-412-link","title":"1. Download Godot game engine version 4.1.2 link","text":""},{"location":"#2-install-python-312-link","title":"2. Install python 3.12 link","text":""},{"location":"#3-install-mkdocs","title":"3. Install MkDocs","text":"<pre><code>pip install --upgrade pip\npip install mkdocs\n</code></pre>"},{"location":"#4-install-git-link","title":"4. Install Git link","text":""},{"location":"#5-set-up-git-user","title":"5. Set up Git user","text":"<pre><code>git config --global user.name \"user_name\"\ngit config --global user.email \"example@gmail.com\"\n</code></pre>"},{"location":"#6-clone-project","title":"6. Clone Project","text":"<pre><code>git clone https://github.com/Tomko-Code/Relic-Seekers.git\n</code></pre>"},{"location":"#7-import-project-to-godot","title":"7. Import project to Godot","text":"<p>Open Godot -&gt; Import -&gt; Select project.godot</p>"},{"location":"Colaboration/code-style/","title":"Code style","text":"Type Convention Info File names snake_case yaml_parsed.gd class_name PascalCase YAMLParser Node names PascalCase Functions snake_case Variables snake_case Signals snake_case always in past tense \"door_opened\" Constants CONSTANT_CASE enum names PascalCase enum members CONSTANT_CASE"},{"location":"Colaboration/code-style/#code-order","title":"Code Order","text":"<ol> <li>tool</li> <li>class_name</li> <li>extends</li> <li>docstring</li> </ol> <ol> <li>signals</li> <li>enums</li> <li>constants</li> <li>exported variables</li> <li>public variables</li> <li>private variables</li> <li>onready variables</li> </ol> <ol> <li>optional built-in virtual _init method</li> <li>built-in virtual _ready method</li> <li>remaining built-in virtual methods</li> <li>public methods</li> <li>private methods</li> </ol>"},{"location":"Colaboration/collision-layers/","title":"Collision layers","text":"Layer Name 1 Player 2 Static 3 Enemy 4 PlayerAttacks 5 EnemyAttacks 6 Gates 7 Pickable 8 Interactable"},{"location":"Colaboration/folder-structure/","title":"Folder structure","text":"<ul> <li>project  <ul> <li>.git  </li> <li>.github  </li> <li>.godot  </li> <li>assets  <ul> <li>art  </li> <li>audio</li> <li>shader</li> <li>themes</li> </ul> </li> <li>builds</li> <li>docs</li> <li>src<ul> <li>entities</li> <li>globals</li> <li>main</li> <li>menus</li> </ul> </li> </ul> </li> </ul>"},{"location":"Documentation/interactable-component/","title":"Interactable component","text":"<p>Interactable component adds eazy way to interac with ocjects. Simply add component to entity and set all export values. Resultat is apearing text when player is in range of interaction and emision of signal when interaction happend.  </p> <p>To add some action to the interaction simply use emited signal.</p> <p>Example :  </p> <pre><code>\n# Some entinty.gd with Interactable component.\nfunc _on_interactable_component_interacted():\n    print(\"interaction.\")\n</code></pre>"},{"location":"Documentation/interactable-component/#setup","title":"Setup","text":"<p>\"interaction_input\" : for seting insteraction method for example pressing button 'X' (1.) \"interaction_title\" : title of interaction (2.) \"input_text\" : interaction input for example \"X\" (3.) \"interaction_descryption\" : interaction descryption (4.) box_position : starting position it sets box on the tip of box arrow  </p> <pre><code>@export var interaction_input:InputEvent = null\n@export var interaction_descryption:String = \"\"\n@export var interaction_title:String = \"\"\n@export var input_text:String = \"\"\n@export var box_position:Vector2 = Vector2.ZERO\n</code></pre>"},{"location":"Documentation/interactable-component/#update-visibility-and-position","title":"Update visibility and position","text":"<p>For position best to use this function. Size of box might change if its descryption changes etc.. This sets position directly below box arrow.</p> <pre><code>func set_box_position(pos:Vector2)\n</code></pre> <p>For visibility</p> <pre><code>func update_box()\n</code></pre>"},{"location":"Documentation/resource-manager-%28global%29/","title":"Resource Manager (Global)","text":"<p>This class is mostly for cashing resources, before game realy started. This is done by making dictionary of all cashed data. Best used for often reused scenes.  </p> <p>In future it will be able to load data in thread.</p>"},{"location":"Documentation/resource-manager-%28global%29/#load-resources","title":"Load resources.","text":"<pre><code>var load_preset = [\n    [\"res://src/entities/projectiles/friendly_projectile.tscn\", \"projectile/friendly_projectile\"],\n    # [...], \n    # [...],\n]\n\nResourceManager.load_preset(load_preset)\n</code></pre> <p>or one by one</p> <pre><code>ResourceManager.load_resource(\"res://src/entities/projectiles/friendly_projectile.tscn\", \"projectile/friendly_projectile\")\n</code></pre>"},{"location":"Documentation/resource-manager-%28global%29/#load-resources-in-thread-not-implemented","title":"Load resources in Thread (NOT IMPLEMENTED).","text":"<pre><code>var load_preset = [\n    [\"res://src/entities/projectiles/friendly_projectile.tscn\", \"projectile/friendly_projectile\"],\n    # [...], \n    # [...],\n]\n\nResourceManager.que_preset(load_preset)\n</code></pre> <p>or one by one</p> <pre><code>ResourceManager.que_resource(\"res://src/entities/projectiles/friendly_projectile.tscn\", \"projectile/friendly_projectile\")\n</code></pre>"},{"location":"Documentation/resource-manager-%28global%29/#geting-resourceinstance","title":"Geting resource/instance","text":"<p>Both function will return null if resource is not cashed and will not try to load it. Note that load() is still okay to use.</p> <pre><code>func get_resource(resource_name: String) \n    # example : ResourceManager.get_resource(\"projectile/friendly_projectile\")\n</code></pre> <pre><code>func get_instance(resource_name: String) \n    # example : ResourceManager.get_instance(\"projectile/friendly_projectile\")\n</code></pre>"},{"location":"Documentation/resource-manager-%28global%29/#manual","title":"Manual","text":"<p>You can ger resource form varible \"resources\"</p> <pre><code># example : var trol_res = ResourceManager.resources[\"enemy\"][troll][0] # resurce\n# example : var trol_res = ResourceManager.resources[\"enemy\"][troll][1] # path\n</code></pre>"},{"location":"Documentation/resource-manager-%28global%29/#resource_existsresource_name-string","title":"resource_exists(resource_name: String)","text":"<p>Returns true/false.</p>"}]}